using UnityEngine;
using System.Collections;
using XboxCtrlrInput;

public class PlayerInput : MonoBehaviour {

    private float CurrentSpeed;
    public float MoveSpeed = 8.0f;
    public int PlayerNum = 1;
    public bool UseForces = false;
    public Sprite PlayerSprite;

    //Dashing vars
    public float DashRechargeTime = 5.0f;
    public float DashTime = 1.0f;
    public float DashSpeed = 1.0f;
    public Sprite DashingSprite;
    public bool IsDashing = false;
    public bool LockDashDirection = true;
    public GameObject DashTrail;
    private float DashRechargeTimeLeft = 0.0f;
    private float DashTimeLeft = 0.0f;
    private float LastHorizontal = 0.0f;
    private float LastVertical = 0.0f;
    
    public GameObject hand;
    public GameObject sprite;
    public GameObject shield;

    public SoundEffectHandler dashSound;
    
    public bool mouseInput = false;

    XboxController xboxController;

    Rigidbody2D rb2d;

	// Use this for initialization
	void Start () {
        rb2d = GetComponent<Rigidbody2D>();
        CurrentSpeed = MoveSpeed;
        DashTrail.GetComponent<ParticleSystem>().Stop(false);
        xboxController = (XboxController)PlayerNum;
    }
	
	// Update is called once per frame
	void Update () {
        if (Globals.Instance.acceptPlayerGameInput)
        {
            HandleDash();
            HandleMovement();
            HandleShieldMovement();
            HandleAttack();
        }
        HandlePause();
    }

    private void HandleAttack()
    {
        if (XCI.GetButtonDown(XboxButton.B))
        {
            Debug.Log("B button pressed");
        }
    }

    private void HandlePause()
    {
        if (XCI.GetButtonDown(XboxButton.Start, xboxController))
        {
            Debug.Log("Start pressed");
            Globals.Instance.TogglePause();
        }
    }

    void HandleDash()
    {
        DashRechargeTimeLeft -= Time.deltaTime;

//        Debug.Log("A? " + XCI.GetButtonDown(XboxButton.A, xboxController));
  //      Debug.Log("B? " + XCI.GetButtonDown(XboxButton.B, xboxController));
    //    Debug.Log("RB? " + XCI.GetButtonDown(XboxButton.RightBumper, xboxController));

        if (XCI.GetButtonDown(XboxButton.A, xboxController) 
            || XCI.GetButtonDown(XboxButton.RightBumper, xboxController)
            || XCI.GetButtonDown(XboxButton.B, xboxController))
        {
            if (DashRechargeTimeLeft <= 0 && !IsDashing)
            {
                
                BeginDash();
            }
            else
            {
                // TODO Alert the player that they can't dash yet
                //Debug.Log("Can't dash, let player know here");
            }
        }
        else if (IsDashing 
            && !XCI.GetButton(XboxButton.A, xboxController)
            && !XCI.GetButton(XboxButton.B, xboxController)
            && !XCI.GetButton(XboxButton.RightBumper, xboxController))
        {
            EndDash();
        }
    }

    void BeginDash()
    {
        IsDashing = true;
        DashTimeLeft = DashTime;
        SpriteRenderer sr = sprite.GetComponent<SpriteRenderer>();
        sr.sprite = DashingSprite;
        CurrentSpeed = DashSpeed;
        gameObject.GetComponent<BoundsChecker>().enabled = false;
        gameObject.layer = LayerMask.NameToLayer("Dashing Player");
<<<<<<< HEAD
        dashSound.PlayEffect();
=======
        DashTrail.GetComponent<ParticleSystem>().Play();
        float angle = Mathf.Atan2(rb2d.velocity.y, rb2d.velocity.x) * Mathf.Rad2Deg + 90;
        Vector3 rotation = new Vector3(0, 0, angle);
        DashTrail.transform.eulerAngles = rotation;
>>>>>>> b2d487cb5bf2ce57e7fcc8b915972ca0013afee0
    }

    void EndDash()
    {
        IsDashing = false;
        DashTimeLeft = 0.0f;
        DashRechargeTimeLeft = DashRechargeTime;
        SpriteRenderer sr = sprite.GetComponent<SpriteRenderer>();
        sr.sprite = PlayerSprite;
        CurrentSpeed = MoveSpeed;
        gameObject.GetComponent<BoundsChecker>().enabled = true;
        gameObject.layer = LayerMask.NameToLayer("Player");
        DashTrail.GetComponent<ParticleSystem>().Stop(false);
    }

    void HandleMovement()
    {
        if (IsDashing)
        {
            DashTimeLeft -= Time.deltaTime;
            if (DashTimeLeft <= 0)
            {
                EndDash();
            }
        }

        float horizontal = 0.0f;
        float vertical = 0.0f;

        if (LockDashDirection && IsDashing)
        {
            horizontal = LastHorizontal;
            vertical = LastVertical;
        }
        else
        {
            horizontal = XCI.GetAxisRaw(XboxAxis.LeftStickX, xboxController);
            vertical = XCI.GetAxisRaw(XboxAxis.LeftStickY, xboxController);
            LastHorizontal = horizontal;
            LastVertical = vertical;
        }

        Vector2 moveDirection = new Vector2(horizontal * CurrentSpeed, vertical * CurrentSpeed);

        if (UseForces)
        {
            rb2d.AddForce(moveDirection, ForceMode2D.Force);
        }
        else
        {
            rb2d.velocity = moveDirection;
        }

        float angle = Mathf.Atan2(moveDirection.y, moveDirection.x) * Mathf.Rad2Deg - 90;
        if (sprite != null) sprite.transform.rotation = Quaternion.AngleAxis(angle, Vector3.forward);
    }

    void HandleShieldMovement()
    {
        if (!IsDashing)
        {
            Vector2 rinput;
            if (mouseInput)
            {
                rinput = Camera.main.ScreenToWorldPoint(Input.mousePosition) - transform.position;
                rinput.Normalize();
            }
            else
            {
                // We are going to read the input every frame
                //rinput = new Vector2(Input.GetAxisRaw("RHorizontal" + PlayerNum), Input.GetAxisRaw("RVertical" + PlayerNum));
                rinput = new Vector2(XCI.GetAxisRaw(XboxAxis.RightStickX, xboxController), XCI.GetAxisRaw(XboxAxis.RightStickY, xboxController));
            }

            if (rinput.magnitude > 0)
            {
                // Apply the transform to the object  
                var angle = Mathf.Atan2(rinput.y, rinput.x) * Mathf.Rad2Deg;
                hand.transform.eulerAngles = new Vector3(0, 0, angle);
            }
        }
    }
}
